//#line 2 "/opt/ros/groovy/share/dynamic_reconfigure/templates/ConfigType.h"
// *********************************************************
// 
// File autogenerated for the vslam_system package 
// by the dynamic_reconfigure package.
// Please do not edit.
// 
// ********************************************************/

/***********************************************************
 * Software License Agreement (BSD License)
 *
 *  Copyright (c) 2008, Willow Garage, Inc.
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above
 *     copyright notice, this list of conditions and the following
 *     disclaimer in the documentation and/or other materials provided
 *     with the distribution.
 *   * Neither the name of the Willow Garage nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 *  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 *  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 *  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 ***********************************************************/

// Author: Blaise Gassend


#ifndef __vslam_system__STEREOVSLAMNODECONFIG_H__
#define __vslam_system__STEREOVSLAMNODECONFIG_H__

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace vslam_system
{
  class StereoVslamNodeConfigStatics;
  
  class StereoVslamNodeConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l, 
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }
      
      virtual void clamp(StereoVslamNodeConfig &config, const StereoVslamNodeConfig &max, const StereoVslamNodeConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const StereoVslamNodeConfig &config1, const StereoVslamNodeConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, StereoVslamNodeConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const StereoVslamNodeConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, StereoVslamNodeConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const StereoVslamNodeConfig &config) const = 0;
      virtual void getValue(const StereoVslamNodeConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;
    
    template <class T>
    class ParamDescription : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string name, std::string type, uint32_t level, 
          std::string description, std::string edit_method, T StereoVslamNodeConfig::* f) :
        AbstractParamDescription(name, type, level, description, edit_method),
        field(f)
      {}

      T (StereoVslamNodeConfig::* field);

      virtual void clamp(StereoVslamNodeConfig &config, const StereoVslamNodeConfig &max, const StereoVslamNodeConfig &min) const
      {
        if (config.*field > max.*field)
          config.*field = max.*field;
        
        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const StereoVslamNodeConfig &config1, const StereoVslamNodeConfig &config2) const
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, StereoVslamNodeConfig &config) const
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const StereoVslamNodeConfig &config) const
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, StereoVslamNodeConfig &config) const
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const StereoVslamNodeConfig &config) const
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const StereoVslamNodeConfig &config, boost::any &val) const
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, StereoVslamNodeConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); i++)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    template<class T, class PT>
    class GroupDescription : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string name, std::string type, int parent, int id, bool s, T PT::* f) : AbstractGroupDescription(name, type, parent, id, s), field(f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;
        
        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); i++) 
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); i++)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }
      
      virtual void updateParams(boost::any &cfg, StereoVslamNodeConfig &top) const
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); i++) 
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); i++)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T (PT::* field);
      std::vector<StereoVslamNodeConfig::AbstractGroupDescriptionConstPtr> groups;
    };
    
class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(StereoVslamNodeConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = params.begin(); i != params.end(); i++)
      {
        boost::any val;
        (*i)->getValue(config, val);

        if("detector"==(*i)->name){detector = boost::any_cast<std::string>(val);}
        if("fast_threshold"==(*i)->name){fast_threshold = boost::any_cast<int>(val);}
        if("fast_nonmax_suppression"==(*i)->name){fast_nonmax_suppression = boost::any_cast<bool>(val);}
        if("harris_max_keypoints"==(*i)->name){harris_max_keypoints = boost::any_cast<int>(val);}
        if("harris_block_size"==(*i)->name){harris_block_size = boost::any_cast<int>(val);}
        if("harris_min_distance"==(*i)->name){harris_min_distance = boost::any_cast<double>(val);}
        if("harris_quality_level"==(*i)->name){harris_quality_level = boost::any_cast<double>(val);}
        if("harris_k"==(*i)->name){harris_k = boost::any_cast<double>(val);}
        if("star_max_size"==(*i)->name){star_max_size = boost::any_cast<int>(val);}
        if("star_response_threshold"==(*i)->name){star_response_threshold = boost::any_cast<int>(val);}
        if("star_line_threshold_projected"==(*i)->name){star_line_threshold_projected = boost::any_cast<int>(val);}
        if("star_line_threshold_binarized"==(*i)->name){star_line_threshold_binarized = boost::any_cast<int>(val);}
        if("star_suppress_nonmax_size"==(*i)->name){star_suppress_nonmax_size = boost::any_cast<int>(val);}
        if("surf_hessian_threshold"==(*i)->name){surf_hessian_threshold = boost::any_cast<double>(val);}
        if("surf_octaves"==(*i)->name){surf_octaves = boost::any_cast<int>(val);}
        if("surf_octave_layers"==(*i)->name){surf_octave_layers = boost::any_cast<int>(val);}
        if("grid_adapter"==(*i)->name){grid_adapter = boost::any_cast<bool>(val);}
        if("grid_max_keypoints"==(*i)->name){grid_max_keypoints = boost::any_cast<int>(val);}
        if("grid_rows"==(*i)->name){grid_rows = boost::any_cast<int>(val);}
        if("grid_cols"==(*i)->name){grid_cols = boost::any_cast<int>(val);}
        if("vo_ransac_iterations"==(*i)->name){vo_ransac_iterations = boost::any_cast<int>(val);}
        if("vo_polish"==(*i)->name){vo_polish = boost::any_cast<bool>(val);}
        if("vo_window_x"==(*i)->name){vo_window_x = boost::any_cast<int>(val);}
        if("vo_window_y"==(*i)->name){vo_window_y = boost::any_cast<int>(val);}
        if("min_keyframe_dist"==(*i)->name){min_keyframe_dist = boost::any_cast<double>(val);}
        if("min_keyframe_angle"==(*i)->name){min_keyframe_angle = boost::any_cast<double>(val);}
        if("min_inliers"==(*i)->name){min_inliers = boost::any_cast<int>(val);}
        if("pr_ransac_iterations"==(*i)->name){pr_ransac_iterations = boost::any_cast<int>(val);}
        if("pr_polish"==(*i)->name){pr_polish = boost::any_cast<bool>(val);}
        if("pr_window_x"==(*i)->name){pr_window_x = boost::any_cast<int>(val);}
        if("pr_window_y"==(*i)->name){pr_window_y = boost::any_cast<int>(val);}
        if("pr_skip"==(*i)->name){pr_skip = boost::any_cast<int>(val);}
        if("pr_inliers"==(*i)->name){pr_inliers = boost::any_cast<int>(val);}
      }
    }

    std::string detector;
int fast_threshold;
bool fast_nonmax_suppression;
int harris_max_keypoints;
int harris_block_size;
double harris_min_distance;
double harris_quality_level;
double harris_k;
int star_max_size;
int star_response_threshold;
int star_line_threshold_projected;
int star_line_threshold_binarized;
int star_suppress_nonmax_size;
double surf_hessian_threshold;
int surf_octaves;
int surf_octave_layers;
bool grid_adapter;
int grid_max_keypoints;
int grid_rows;
int grid_cols;
int vo_ransac_iterations;
bool vo_polish;
int vo_window_x;
int vo_window_y;
double min_keyframe_dist;
double min_keyframe_angle;
int min_inliers;
int pr_ransac_iterations;
bool pr_polish;
int pr_window_x;
int pr_window_y;
int pr_skip;
int pr_inliers;

    bool state;
    std::string name;

    
}groups;



//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      std::string detector;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      int fast_threshold;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      bool fast_nonmax_suppression;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      int harris_max_keypoints;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      int harris_block_size;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      double harris_min_distance;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      double harris_quality_level;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      double harris_k;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      int star_max_size;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      int star_response_threshold;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      int star_line_threshold_projected;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      int star_line_threshold_binarized;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      int star_suppress_nonmax_size;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      double surf_hessian_threshold;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      int surf_octaves;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      int surf_octave_layers;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      bool grid_adapter;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      int grid_max_keypoints;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      int grid_rows;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      int grid_cols;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      int vo_ransac_iterations;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      bool vo_polish;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      int vo_window_x;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      int vo_window_y;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      double min_keyframe_dist;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      double min_keyframe_angle;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      int min_inliers;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      int pr_ransac_iterations;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      bool pr_polish;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      int pr_window_x;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      int pr_window_y;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      int pr_skip;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      int pr_inliers;
//#line 255 "/opt/ros/groovy/share/dynamic_reconfigure/templates/ConfigType.h"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("StereoVslamNodeConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }
    
    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }
    
    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const StereoVslamNodeConfig &__max__ = __getMax__();
      const StereoVslamNodeConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const StereoVslamNodeConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        (*i)->calcLevel(level, config, *this);
      return level;
    }
    
    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const StereoVslamNodeConfig &__getDefault__();
    static const StereoVslamNodeConfig &__getMax__();
    static const StereoVslamNodeConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();
    
  private:
    static const StereoVslamNodeConfigStatics *__get_statics__();
  };
  
  template <> // Max and min are ignored for strings.
  inline void StereoVslamNodeConfig::ParamDescription<std::string>::clamp(StereoVslamNodeConfig &config, const StereoVslamNodeConfig &max, const StereoVslamNodeConfig &min) const
  {
    return;
  }

  class StereoVslamNodeConfigStatics
  {
    friend class StereoVslamNodeConfig;
    
    StereoVslamNodeConfigStatics()
    {
StereoVslamNodeConfig::GroupDescription<StereoVslamNodeConfig::DEFAULT, StereoVslamNodeConfig> Default("Default", "", 0, 0, true, &StereoVslamNodeConfig::groups);
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __min__.detector = "";
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __max__.detector = "";
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __default__.detector = "FAST";
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<std::string>("detector", "str", 0, "Keypoint detector", "{'enum_description': 'Enum to set the keypoint detector', 'enum': [{'srcline': 7, 'description': 'FAST detector', 'srcfile': '/home/sebasgm/ros_devel/src/slam_karto/vslam_libs/vslam_system/cfg/detector_parameters.py', 'cconsttype': 'const char * const', 'value': 'FAST', 'ctype': 'std::string', 'type': 'str', 'name': 'FAST'}, {'srcline': 8, 'description': 'Harris detector', 'srcfile': '/home/sebasgm/ros_devel/src/slam_karto/vslam_libs/vslam_system/cfg/detector_parameters.py', 'cconsttype': 'const char * const', 'value': 'Harris', 'ctype': 'std::string', 'type': 'str', 'name': 'Harris'}, {'srcline': 9, 'description': 'Star detector', 'srcfile': '/home/sebasgm/ros_devel/src/slam_karto/vslam_libs/vslam_system/cfg/detector_parameters.py', 'cconsttype': 'const char * const', 'value': 'Star', 'ctype': 'std::string', 'type': 'str', 'name': 'Star'}, {'srcline': 10, 'description': 'SURF detector', 'srcfile': '/home/sebasgm/ros_devel/src/slam_karto/vslam_libs/vslam_system/cfg/detector_parameters.py', 'cconsttype': 'const char * const', 'value': 'SURF', 'ctype': 'std::string', 'type': 'str', 'name': 'SURF'}]}", &StereoVslamNodeConfig::detector)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<std::string>("detector", "str", 0, "Keypoint detector", "{'enum_description': 'Enum to set the keypoint detector', 'enum': [{'srcline': 7, 'description': 'FAST detector', 'srcfile': '/home/sebasgm/ros_devel/src/slam_karto/vslam_libs/vslam_system/cfg/detector_parameters.py', 'cconsttype': 'const char * const', 'value': 'FAST', 'ctype': 'std::string', 'type': 'str', 'name': 'FAST'}, {'srcline': 8, 'description': 'Harris detector', 'srcfile': '/home/sebasgm/ros_devel/src/slam_karto/vslam_libs/vslam_system/cfg/detector_parameters.py', 'cconsttype': 'const char * const', 'value': 'Harris', 'ctype': 'std::string', 'type': 'str', 'name': 'Harris'}, {'srcline': 9, 'description': 'Star detector', 'srcfile': '/home/sebasgm/ros_devel/src/slam_karto/vslam_libs/vslam_system/cfg/detector_parameters.py', 'cconsttype': 'const char * const', 'value': 'Star', 'ctype': 'std::string', 'type': 'str', 'name': 'Star'}, {'srcline': 10, 'description': 'SURF detector', 'srcfile': '/home/sebasgm/ros_devel/src/slam_karto/vslam_libs/vslam_system/cfg/detector_parameters.py', 'cconsttype': 'const char * const', 'value': 'SURF', 'ctype': 'std::string', 'type': 'str', 'name': 'SURF'}]}", &StereoVslamNodeConfig::detector)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __min__.fast_threshold = 1;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __max__.fast_threshold = 200;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __default__.fast_threshold = 10;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<int>("fast_threshold", "int", 0, "FAST detector threshold", "", &StereoVslamNodeConfig::fast_threshold)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<int>("fast_threshold", "int", 0, "FAST detector threshold", "", &StereoVslamNodeConfig::fast_threshold)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __min__.fast_nonmax_suppression = 0;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __max__.fast_nonmax_suppression = 1;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __default__.fast_nonmax_suppression = 1;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<bool>("fast_nonmax_suppression", "bool", 0, "FAST detector nonmax suppression on/off", "", &StereoVslamNodeConfig::fast_nonmax_suppression)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<bool>("fast_nonmax_suppression", "bool", 0, "FAST detector nonmax suppression on/off", "", &StereoVslamNodeConfig::fast_nonmax_suppression)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __min__.harris_max_keypoints = 1;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __max__.harris_max_keypoints = 1000;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __default__.harris_max_keypoints = 300;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<int>("harris_max_keypoints", "int", 0, "Max keypoints returned", "", &StereoVslamNodeConfig::harris_max_keypoints)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<int>("harris_max_keypoints", "int", 0, "Max keypoints returned", "", &StereoVslamNodeConfig::harris_max_keypoints)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __min__.harris_block_size = 1;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __max__.harris_block_size = 11;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __default__.harris_block_size = 3;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<int>("harris_block_size", "int", 0, "Size of averaging block", "", &StereoVslamNodeConfig::harris_block_size)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<int>("harris_block_size", "int", 0, "Size of averaging block", "", &StereoVslamNodeConfig::harris_block_size)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __min__.harris_min_distance = 1.0;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __max__.harris_min_distance = 20.0;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __default__.harris_min_distance = 1.0;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<double>("harris_min_distance", "double", 0, "Minimum distance between returned corners", "", &StereoVslamNodeConfig::harris_min_distance)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<double>("harris_min_distance", "double", 0, "Minimum distance between returned corners", "", &StereoVslamNodeConfig::harris_min_distance)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __min__.harris_quality_level = 0.0;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __max__.harris_quality_level = 1.0;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __default__.harris_quality_level = 0.01;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<double>("harris_quality_level", "double", 0, "Minimal accepted quality", "", &StereoVslamNodeConfig::harris_quality_level)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<double>("harris_quality_level", "double", 0, "Minimal accepted quality", "", &StereoVslamNodeConfig::harris_quality_level)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __min__.harris_k = 0.0;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __max__.harris_k = 1.0;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __default__.harris_k = 0.04;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<double>("harris_k", "double", 0, "Harris detector free parameter", "", &StereoVslamNodeConfig::harris_k)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<double>("harris_k", "double", 0, "Harris detector free parameter", "", &StereoVslamNodeConfig::harris_k)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __min__.star_max_size = 4;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __max__.star_max_size = 128;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __default__.star_max_size = 16;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<int>("star_max_size", "int", 0, "Max feature size", "", &StereoVslamNodeConfig::star_max_size)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<int>("star_max_size", "int", 0, "Max feature size", "", &StereoVslamNodeConfig::star_max_size)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __min__.star_response_threshold = 0;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __max__.star_response_threshold = 200;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __default__.star_response_threshold = 30;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<int>("star_response_threshold", "int", 0, "Threshold to eliminate weak features", "", &StereoVslamNodeConfig::star_response_threshold)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<int>("star_response_threshold", "int", 0, "Threshold to eliminate weak features", "", &StereoVslamNodeConfig::star_response_threshold)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __min__.star_line_threshold_projected = 0;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __max__.star_line_threshold_projected = 50;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __default__.star_line_threshold_projected = 10;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<int>("star_line_threshold_projected", "int", 0, "Threshold to eliminate edges", "", &StereoVslamNodeConfig::star_line_threshold_projected)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<int>("star_line_threshold_projected", "int", 0, "Threshold to eliminate edges", "", &StereoVslamNodeConfig::star_line_threshold_projected)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __min__.star_line_threshold_binarized = 0;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __max__.star_line_threshold_binarized = 50;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __default__.star_line_threshold_binarized = 8;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<int>("star_line_threshold_binarized", "int", 0, "Another threshold to eliminate edges", "", &StereoVslamNodeConfig::star_line_threshold_binarized)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<int>("star_line_threshold_binarized", "int", 0, "Another threshold to eliminate edges", "", &StereoVslamNodeConfig::star_line_threshold_binarized)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __min__.star_suppress_nonmax_size = 0;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __max__.star_suppress_nonmax_size = 11;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __default__.star_suppress_nonmax_size = 5;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<int>("star_suppress_nonmax_size", "int", 0, "Size of neighborhood for nonmax suppression", "", &StereoVslamNodeConfig::star_suppress_nonmax_size)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<int>("star_suppress_nonmax_size", "int", 0, "Size of neighborhood for nonmax suppression", "", &StereoVslamNodeConfig::star_suppress_nonmax_size)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __min__.surf_hessian_threshold = 0.0;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __max__.surf_hessian_threshold = 8000.0;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __default__.surf_hessian_threshold = 1000.0;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<double>("surf_hessian_threshold", "double", 0, "Minimum hessian response", "", &StereoVslamNodeConfig::surf_hessian_threshold)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<double>("surf_hessian_threshold", "double", 0, "Minimum hessian response", "", &StereoVslamNodeConfig::surf_hessian_threshold)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __min__.surf_octaves = 1;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __max__.surf_octaves = 10;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __default__.surf_octaves = 3;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<int>("surf_octaves", "int", 0, "Number of octaves", "", &StereoVslamNodeConfig::surf_octaves)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<int>("surf_octaves", "int", 0, "Number of octaves", "", &StereoVslamNodeConfig::surf_octaves)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __min__.surf_octave_layers = 1;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __max__.surf_octave_layers = 10;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __default__.surf_octave_layers = 4;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<int>("surf_octave_layers", "int", 0, "Number of layers within each octave", "", &StereoVslamNodeConfig::surf_octave_layers)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<int>("surf_octave_layers", "int", 0, "Number of layers within each octave", "", &StereoVslamNodeConfig::surf_octave_layers)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __min__.grid_adapter = 0;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __max__.grid_adapter = 1;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __default__.grid_adapter = 0;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<bool>("grid_adapter", "bool", 0, "Grid partitioning adapter on/off", "", &StereoVslamNodeConfig::grid_adapter)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<bool>("grid_adapter", "bool", 0, "Grid partitioning adapter on/off", "", &StereoVslamNodeConfig::grid_adapter)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __min__.grid_max_keypoints = 1;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __max__.grid_max_keypoints = 1000;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __default__.grid_max_keypoints = 300;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<int>("grid_max_keypoints", "int", 0, "Max total keypoints", "", &StereoVslamNodeConfig::grid_max_keypoints)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<int>("grid_max_keypoints", "int", 0, "Max total keypoints", "", &StereoVslamNodeConfig::grid_max_keypoints)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __min__.grid_rows = 1;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __max__.grid_rows = 8;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __default__.grid_rows = 4;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<int>("grid_rows", "int", 0, "Grid rows", "", &StereoVslamNodeConfig::grid_rows)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<int>("grid_rows", "int", 0, "Grid rows", "", &StereoVslamNodeConfig::grid_rows)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __min__.grid_cols = 1;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __max__.grid_cols = 8;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __default__.grid_cols = 4;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<int>("grid_cols", "int", 0, "Grid columns", "", &StereoVslamNodeConfig::grid_cols)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<int>("grid_cols", "int", 0, "Grid columns", "", &StereoVslamNodeConfig::grid_cols)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __min__.vo_ransac_iterations = 1;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __max__.vo_ransac_iterations = 10000;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __default__.vo_ransac_iterations = 1000;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<int>("vo_ransac_iterations", "int", 0, "Visual Odometry RANSAC iterations", "", &StereoVslamNodeConfig::vo_ransac_iterations)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<int>("vo_ransac_iterations", "int", 0, "Visual Odometry RANSAC iterations", "", &StereoVslamNodeConfig::vo_ransac_iterations)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __min__.vo_polish = 0;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __max__.vo_polish = 1;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __default__.vo_polish = 1;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<bool>("vo_polish", "bool", 0, "Visual Odometry polish with SBA on/off", "", &StereoVslamNodeConfig::vo_polish)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<bool>("vo_polish", "bool", 0, "Visual Odometry polish with SBA on/off", "", &StereoVslamNodeConfig::vo_polish)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __min__.vo_window_x = 1;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __max__.vo_window_x = 640;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __default__.vo_window_x = 92;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<int>("vo_window_x", "int", 0, "Visual Odometry matching window size (x)", "", &StereoVslamNodeConfig::vo_window_x)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<int>("vo_window_x", "int", 0, "Visual Odometry matching window size (x)", "", &StereoVslamNodeConfig::vo_window_x)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __min__.vo_window_y = 1;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __max__.vo_window_y = 480;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __default__.vo_window_y = 48;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<int>("vo_window_y", "int", 0, "Visual Odometry matching window size (y)", "", &StereoVslamNodeConfig::vo_window_y)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<int>("vo_window_y", "int", 0, "Visual Odometry matching window size (y)", "", &StereoVslamNodeConfig::vo_window_y)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __min__.min_keyframe_dist = 0.0;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __max__.min_keyframe_dist = 50.0;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __default__.min_keyframe_dist = 0.2;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<double>("min_keyframe_dist", "double", 0, "Minimum keyframe distance (meters)", "", &StereoVslamNodeConfig::min_keyframe_dist)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<double>("min_keyframe_dist", "double", 0, "Minimum keyframe distance (meters)", "", &StereoVslamNodeConfig::min_keyframe_dist)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __min__.min_keyframe_angle = 0.0;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __max__.min_keyframe_angle = 3.14;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __default__.min_keyframe_angle = 0.1;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<double>("min_keyframe_angle", "double", 0, "Minimum keyframe angular distance (radians)", "", &StereoVslamNodeConfig::min_keyframe_angle)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<double>("min_keyframe_angle", "double", 0, "Minimum keyframe angular distance (radians)", "", &StereoVslamNodeConfig::min_keyframe_angle)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __min__.min_inliers = 0;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __max__.min_inliers = 1000;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __default__.min_inliers = 0;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<int>("min_inliers", "int", 0, "Minimum keyframe inliers", "", &StereoVslamNodeConfig::min_inliers)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<int>("min_inliers", "int", 0, "Minimum keyframe inliers", "", &StereoVslamNodeConfig::min_inliers)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __min__.pr_ransac_iterations = 1;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __max__.pr_ransac_iterations = 10000;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __default__.pr_ransac_iterations = 5000;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<int>("pr_ransac_iterations", "int", 0, "Place Recognizer RANSAC iterations", "", &StereoVslamNodeConfig::pr_ransac_iterations)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<int>("pr_ransac_iterations", "int", 0, "Place Recognizer RANSAC iterations", "", &StereoVslamNodeConfig::pr_ransac_iterations)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __min__.pr_polish = 0;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __max__.pr_polish = 1;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __default__.pr_polish = 1;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<bool>("pr_polish", "bool", 0, "Place Recognizer polish with SBA on/off", "", &StereoVslamNodeConfig::pr_polish)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<bool>("pr_polish", "bool", 0, "Place Recognizer polish with SBA on/off", "", &StereoVslamNodeConfig::pr_polish)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __min__.pr_window_x = 1;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __max__.pr_window_x = 640;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __default__.pr_window_x = 92;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<int>("pr_window_x", "int", 0, "Place Recognizer matching window size (x)", "", &StereoVslamNodeConfig::pr_window_x)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<int>("pr_window_x", "int", 0, "Place Recognizer matching window size (x)", "", &StereoVslamNodeConfig::pr_window_x)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __min__.pr_window_y = 1;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __max__.pr_window_y = 480;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __default__.pr_window_y = 48;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<int>("pr_window_y", "int", 0, "Place Recognizer matching window size (y)", "", &StereoVslamNodeConfig::pr_window_y)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<int>("pr_window_y", "int", 0, "Place Recognizer matching window size (y)", "", &StereoVslamNodeConfig::pr_window_y)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __min__.pr_skip = 0;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __max__.pr_skip = 100;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __default__.pr_skip = 20;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<int>("pr_skip", "int", 0, "Number of latest frames for Place Recognizer to skip", "", &StereoVslamNodeConfig::pr_skip)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<int>("pr_skip", "int", 0, "Number of latest frames for Place Recognizer to skip", "", &StereoVslamNodeConfig::pr_skip)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __min__.pr_inliers = 1;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __max__.pr_inliers = 1000;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __default__.pr_inliers = 200;
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<int>("pr_inliers", "int", 0, "Minimum number of inliers for Place Recognition", "", &StereoVslamNodeConfig::pr_inliers)));
//#line 259 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(StereoVslamNodeConfig::AbstractParamDescriptionConstPtr(new StereoVslamNodeConfig::ParamDescription<int>("pr_inliers", "int", 0, "Minimum number of inliers for Place Recognition", "", &StereoVslamNodeConfig::pr_inliers)));
//#line 233 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      Default.convertParams();
//#line 233 "/opt/ros/groovy/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __group_descriptions__.push_back(StereoVslamNodeConfig::AbstractGroupDescriptionConstPtr(new StereoVslamNodeConfig::GroupDescription<StereoVslamNodeConfig::DEFAULT, StereoVslamNodeConfig>(Default)));
//#line 390 "/opt/ros/groovy/share/dynamic_reconfigure/templates/ConfigType.h"
    
      for (std::vector<StereoVslamNodeConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__); 
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__); 
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__); 
    }
    std::vector<StereoVslamNodeConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<StereoVslamNodeConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    StereoVslamNodeConfig __max__;
    StereoVslamNodeConfig __min__;
    StereoVslamNodeConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const StereoVslamNodeConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static StereoVslamNodeConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &StereoVslamNodeConfig::__getDescriptionMessage__() 
  {
    return __get_statics__()->__description_message__;
  }

  inline const StereoVslamNodeConfig &StereoVslamNodeConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }
  
  inline const StereoVslamNodeConfig &StereoVslamNodeConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }
  
  inline const StereoVslamNodeConfig &StereoVslamNodeConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }
  
  inline const std::vector<StereoVslamNodeConfig::AbstractParamDescriptionConstPtr> &StereoVslamNodeConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<StereoVslamNodeConfig::AbstractGroupDescriptionConstPtr> &StereoVslamNodeConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const StereoVslamNodeConfigStatics *StereoVslamNodeConfig::__get_statics__()
  {
    const static StereoVslamNodeConfigStatics *statics;
  
    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = StereoVslamNodeConfigStatics::get_instance();
    
    return statics;
  }

//#line 7 "/home/sebasgm/ros_devel/src/slam_karto/vslam_libs/vslam_system/cfg/detector_parameters.py"
      const char * const StereoVslamNode_FAST = "FAST";
//#line 8 "/home/sebasgm/ros_devel/src/slam_karto/vslam_libs/vslam_system/cfg/detector_parameters.py"
      const char * const StereoVslamNode_Harris = "Harris";
//#line 9 "/home/sebasgm/ros_devel/src/slam_karto/vslam_libs/vslam_system/cfg/detector_parameters.py"
      const char * const StereoVslamNode_Star = "Star";
//#line 10 "/home/sebasgm/ros_devel/src/slam_karto/vslam_libs/vslam_system/cfg/detector_parameters.py"
      const char * const StereoVslamNode_SURF = "SURF";
}

#endif // __STEREOVSLAMNODERECONFIGURATOR_H__
